{
  "name": "grunt-cache-breaker",
  "description": "Simple cache-breaker, appends a timestamp or md5 hash to any urls",
  "version": "2.0.1",
  "homepage": "https://github.com/shakyshane/grunt-cache-breaker",
  "author": {
    "name": "Shane Osbourne",
    "email": "shane.osbourne8@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/shakyshane/grunt-cache-breaker.git"
  },
  "bugs": {
    "url": "https://github.com/shakyshane/grunt-cache-breaker/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/shakyshane/grunt-cache-breaker/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-nodeunit": "^0.4.1",
    "lodash": "^3.10.1"
  },
  "keywords": [
    "gruntplugin",
    "cache",
    "bust",
    "buster",
    "break"
  ],
  "dependencies": {
    "cache-breaker": "0.0.4",
    "lodash.clonedeep": "^3.0.2"
  },
  "readme": "# grunt-cache-breaker [![Build Status](https://travis-ci.org/shakyShane/grunt-cache-breaker.png?branch=master)](https://travis-ci.org/shakyShane/grunt-cache-breaker)\n\n```html\n<!-- Turn this -->\n<script src=\"/js/dist/combined.min.js\"></script>\n\n<!-- into this -->\n<script src=\"/js/dist/combined.min.js?rel=123456\"></script>\n\n<!-- or this -->\n<script src=\"/js/dist/combined.min.123456.js\"></script>\n\n<!-- or this (md5 hash of file contents) -->\n<script src=\"/js/dist/combined.min.ow23de343.js\"></script>\n```\n\n## Getting Started\n\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-cache-breaker --save-dev\n```\nOnce the plugin has been installed, add this to your Gruntfile.js\n\n    grunt.loadNpmTasks('grunt-cache-breaker');\n\nAnd then add one of the following to your list of tasks\n\n##Usage\n###(all examples require version 1.0.0 or above)\n\n**Append timestamps as query strings**\n\nVery useful in the development stages, not to be used in production though (see the other examples)\n\n```js\n// Append a timestamp to 'all.min.js' & 'core.min.js' which are both located in 'index.html'\ncachebreaker: {\n    dev: {\n        options: {\n            match: ['all.min.js', 'core.min.css'],\n        },\n        files: {\n            src: ['index.html']\n        }\n    }\n}\n```\n\n**Append timestamps as filename changes**\n\nA great idea if you have server rewrites. The file names are not changed, just changed in the markup.\n\nFile urls will be rewritten to `all.min.4252425.js`, for example\n\n```js\n// Append a timestamp to 'all.min.js' & 'core.min.js' which are both located in 'index.html'\ncachebreaker: {\n    dev: {\n        options: {\n            match: ['all.min.js', 'core.min.css'],\n            position: 'filename'\n        },\n        files: {\n            src: ['index.html']\n        }\n    }\n}\n```\n\n**Append timestamps as filename changes in certain positions**\n\nAgain, to be used with server rewrites, this allows you specify which 'piece' of the filename is rewritten.\n\nFile urls will be rewritten to `all.4252425.js`, for example.\n\n```js\n// Append a timestamp to 'all.min.js' & 'core.min.js' which are both located in 'index.html'\ncachebreaker: {\n    dev: {\n        options: {\n            match: ['all.*.js', 'core.*.css'],\n            position: 'overwrite'\n        },\n        files: {\n            src: ['index.html']\n        }\n    }\n}\n```\n\n##MD5 hash\nUse the contents of a file to generate a hash instead of a timestamp. Works in all positions mentioned above.\n\nThis example will create links like this: `all.min.js?rel=hetweyj332` - which is useful as your templates only change\nwhen the contents of the file change.\n\n```js\n// Append a md5 hash to 'all.js' which is located in 'index.html'\ncachebreaker: {\n    dev: {\n        options: {\n            match: ['all.js'],\n            replacement: 'md5',\n            src: {\n                path: 'app/all.js'\n            }\n        },\n        files: {\n            src: ['index.html']\n        }\n    }\n}\n```\n\n##Multiple MD5 hashs (v2.0.0 required)\nUse the contents of multiple files to generate a hash for each.\nNOTE: When passing an object to the `match` array like this, each `key`\nis the pattern to search for in the html file & the value is the actual\nfile to be hashed. \n\nIf you're not sure, check the [Gruntfile.js](https://github.com/shakyShane/grunt-cache-breaker/blob/master/Gruntfile.js#L56-L69)\nin this project for working examples.\n\n```js\n// Append a md5 hash to 'all.js' & `script.js` which is located in 'index.html'\ncachebreaker: {\n    dev: {\n        options: {\n            match: [\n                {\n                    // Pattern    // File to hash\n                    'script.js': 'test/fixtures/js/script.js',\n                    'app.js':    'test/fixtures/js/app.js'\n                }\n            ],\n            replacement: 'md5'\n        },\n        files: {\n            src: ['index.html']\n        }\n    }\n}\n```\n\n##Custom replacement\nYou can also provide your own replacement if the Timestamps or MD5 hashes are not right for you.\n\nThis example would change the URL of app.js, to `app.js?rel=v_2_0`\n\n```js\n// Append a custom string to 'all.js' which is located in 'index.html'\ncachebreaker: {\n    dev: {\n        options: {\n            match: ['all.js'],\n            replacement: function (){\n                return \"v_2_0\"\n            }\n        },\n        files: {\n            src: ['index.html']\n        }\n    }\n}\n```\n\nOf course, as with all examples, you're free to mix & match the options. For example, you could use\nthe custom method above, but to change the filename in the markup instead of a query string.\n\n```js\n// Change filename in the markup to include custom string\ncachebreaker: {\n    dev: {\n        options: {\n            match: ['all.js'],\n            position: 'filename',\n            replacement: function (){\n                return \"v_2_0\"\n            }\n        },\n        files: {\n            src: ['index.html']\n        }\n    }\n}\n```\n\n##Options\n\n| Option      | Type            | Default  | Description                          |   |\n|-------------|-----------------|----------|--------------------------------------|---|\n| match       | string|array    | null     |                                      |   |\n| replacement | string|function | \"time\"   | \"time\", \"md5\", or custom function    |   |\n| position    | \"string\"        | \"append\" | \"append\", \"filename\", \"overwrite\"    |   |\n| src.path    | \"string\"        | null     | Path to file to be used for md5 hash |   |\n\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n",
  "readmeFilename": "README.md",
  "_id": "grunt-cache-breaker@2.0.1",
  "dist": {
    "shasum": "316e4e0e9e93b703580fc4dff122e5d4f8d26a1c"
  },
  "_from": "grunt-cache-breaker@",
  "_resolved": "https://registry.npmjs.org/grunt-cache-breaker/-/grunt-cache-breaker-2.0.1.tgz"
}
